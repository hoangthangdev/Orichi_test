{"ast":null,"code":"import { useState } from 'react';\nimport { themeDefault, getMediaConditions } from '@shopify/polaris-tokens';\nimport { isServer } from './target.js';\nimport { useIsomorphicLayoutEffect } from './use-isomorphic-layout-effect.js';\nconst Breakpoints = {\n  // TODO: Update to smDown\n  navigationBarCollapsed: '767.95px',\n  // TODO: Update to lgDown\n  stackedContent: '1039.95px'\n};\nconst noWindowMatches = {\n  media: '',\n  addListener: noop,\n  removeListener: noop,\n  matches: false,\n  onchange: noop,\n  addEventListener: noop,\n  removeEventListener: noop,\n  dispatchEvent: _ => true\n};\nfunction noop() {}\nfunction navigationBarCollapsed() {\n  return isServer ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.navigationBarCollapsed})`);\n}\nfunction stackedContent() {\n  return isServer ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.stackedContent})`);\n}\n\n/**\r\n * Directional alias for each Polaris `breakpoints` token.\r\n *\r\n * @example 'smUp' | 'smDown' | 'smOnly' | 'mdUp' | etc.\r\n */\n\n/**\r\n * Match results for each directional Polaris `breakpoints` alias.\r\n */\n\nconst hookCallbacks = new Set();\nconst breakpointsQueryEntries = getBreakpointsQueryEntries(themeDefault.breakpoints);\nif (!isServer) {\n  breakpointsQueryEntries.forEach(([breakpointAlias, query]) => {\n    const eventListener = event => {\n      for (const hookCallback of hookCallbacks) {\n        hookCallback(breakpointAlias, event.matches);\n      }\n    };\n    const mql = window.matchMedia(query);\n    if (mql.addListener) {\n      mql.addListener(eventListener);\n    } else {\n      mql.addEventListener('change', eventListener);\n    }\n  });\n}\nfunction getDefaultMatches(defaults) {\n  return Object.fromEntries(breakpointsQueryEntries.map(([directionAlias]) => [directionAlias, typeof defaults === 'boolean' ? defaults : defaults?.[directionAlias] ?? false]));\n}\nfunction getLiveMatches() {\n  return Object.fromEntries(breakpointsQueryEntries.map(([directionAlias, query]) => [directionAlias, window.matchMedia(query).matches]));\n}\n/**\r\n * Retrieves media query matches for each directional Polaris `breakpoints` alias.\r\n *\r\n * @example\r\n * const {smUp} = useBreakpoints();\r\n * return smUp && 'Hello world';\r\n *\r\n * @example\r\n * const {mdUp} = useBreakpoints({defaults: {mdUp: true}});\r\n * mdUp //=> `true` during SSR\r\n *\r\n * @example\r\n * const breakpoints = useBreakpoints({defaults: true});\r\n * breakpoints //=> All values will be `true` during SSR\r\n */\nfunction useBreakpoints(options) {\n  // On SSR, and initial CSR, we force usage of the defaults to avoid a\n  // hydration mismatch error.\n  // Later, in the effect, we will call this again on the client side without\n  // any defaults to trigger a more accurate client side evaluation.\n  const [breakpoints, setBreakpoints] = useState(getDefaultMatches(options?.defaults));\n  useIsomorphicLayoutEffect(() => {\n    // Now that we're client side, get the real values\n    setBreakpoints(getLiveMatches());\n\n    // Register a callback to set the breakpoints object whenever there's a\n    // change in the future\n    const callback = (breakpointAlias, matches) => {\n      setBreakpoints(prevBreakpoints => ({\n        ...prevBreakpoints,\n        [breakpointAlias]: matches\n      }));\n    };\n    hookCallbacks.add(callback);\n    return () => {\n      hookCallbacks.delete(callback);\n    };\n  }, []);\n  return breakpoints;\n}\n\n/**\r\n * Converts `breakpoints` tokens into directional media query entries.\r\n *\r\n * @example\r\n * const breakpointsQueryEntries = getBreakpointsQueryEntries(breakpoints);\r\n * breakpointsQueryEntries === [\r\n *   ['xsUp', '(min-width: ...)'],\r\n *   ['xsDown', '(max-width: ...)'],\r\n *   ['xsOnly', '(min-width: ...) and (max-width: ...)'],\r\n *   ['smUp', '(min-width: ...) and (max-width: ...)'],\r\n *   ['mdUp', '(min-width: ...) and (max-width: ...)'],\r\n *   // etc.\r\n * ]\r\n */\nfunction getBreakpointsQueryEntries(breakpoints) {\n  const mediaConditionEntries = Object.entries(getMediaConditions(breakpoints));\n  return mediaConditionEntries.map(([breakpointsToken, mediaConditions]) => Object.entries(mediaConditions).map(([direction, mediaCondition]) => {\n    const breakpointsAlias = breakpointsToken.split('-')[1];\n\n    // e.g. smUp, smDown, smOnly, etc.\n    const directionAlias = `${breakpointsAlias}${capitalize(direction)}`;\n    return [directionAlias, mediaCondition];\n  })).flat();\n}\nfunction capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nexport { getBreakpointsQueryEntries, navigationBarCollapsed, stackedContent, useBreakpoints };","map":{"version":3,"names":["useState","themeDefault","getMediaConditions","isServer","useIsomorphicLayoutEffect","Breakpoints","navigationBarCollapsed","stackedContent","noWindowMatches","media","addListener","noop","removeListener","matches","onchange","addEventListener","removeEventListener","dispatchEvent","_","window","matchMedia","hookCallbacks","Set","breakpointsQueryEntries","getBreakpointsQueryEntries","breakpoints","forEach","breakpointAlias","query","eventListener","event","hookCallback","mql","getDefaultMatches","defaults","Object","fromEntries","map","directionAlias","getLiveMatches","useBreakpoints","options","setBreakpoints","callback","prevBreakpoints","add","delete","mediaConditionEntries","entries","breakpointsToken","mediaConditions","direction","mediaCondition","breakpointsAlias","split","capitalize","flat","str","charAt","toUpperCase","slice"],"sources":["D:/Orichi_test/4. Form_Discount/test/node_modules/@shopify/polaris/build/esm/utilities/breakpoints.js"],"sourcesContent":["import { useState } from 'react';\r\nimport { themeDefault, getMediaConditions } from '@shopify/polaris-tokens';\r\nimport { isServer } from './target.js';\r\nimport { useIsomorphicLayoutEffect } from './use-isomorphic-layout-effect.js';\r\n\r\nconst Breakpoints = {\r\n  // TODO: Update to smDown\r\n  navigationBarCollapsed: '767.95px',\r\n  // TODO: Update to lgDown\r\n  stackedContent: '1039.95px'\r\n};\r\nconst noWindowMatches = {\r\n  media: '',\r\n  addListener: noop,\r\n  removeListener: noop,\r\n  matches: false,\r\n  onchange: noop,\r\n  addEventListener: noop,\r\n  removeEventListener: noop,\r\n  dispatchEvent: _ => true\r\n};\r\nfunction noop() {}\r\nfunction navigationBarCollapsed() {\r\n  return isServer ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.navigationBarCollapsed})`);\r\n}\r\nfunction stackedContent() {\r\n  return isServer ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.stackedContent})`);\r\n}\r\n\r\n/**\r\n * Directional alias for each Polaris `breakpoints` token.\r\n *\r\n * @example 'smUp' | 'smDown' | 'smOnly' | 'mdUp' | etc.\r\n */\r\n\r\n/**\r\n * Match results for each directional Polaris `breakpoints` alias.\r\n */\r\n\r\nconst hookCallbacks = new Set();\r\nconst breakpointsQueryEntries = getBreakpointsQueryEntries(themeDefault.breakpoints);\r\nif (!isServer) {\r\n  breakpointsQueryEntries.forEach(([breakpointAlias, query]) => {\r\n    const eventListener = event => {\r\n      for (const hookCallback of hookCallbacks) {\r\n        hookCallback(breakpointAlias, event.matches);\r\n      }\r\n    };\r\n    const mql = window.matchMedia(query);\r\n    if (mql.addListener) {\r\n      mql.addListener(eventListener);\r\n    } else {\r\n      mql.addEventListener('change', eventListener);\r\n    }\r\n  });\r\n}\r\nfunction getDefaultMatches(defaults) {\r\n  return Object.fromEntries(breakpointsQueryEntries.map(([directionAlias]) => [directionAlias, typeof defaults === 'boolean' ? defaults : defaults?.[directionAlias] ?? false]));\r\n}\r\nfunction getLiveMatches() {\r\n  return Object.fromEntries(breakpointsQueryEntries.map(([directionAlias, query]) => [directionAlias, window.matchMedia(query).matches]));\r\n}\r\n/**\r\n * Retrieves media query matches for each directional Polaris `breakpoints` alias.\r\n *\r\n * @example\r\n * const {smUp} = useBreakpoints();\r\n * return smUp && 'Hello world';\r\n *\r\n * @example\r\n * const {mdUp} = useBreakpoints({defaults: {mdUp: true}});\r\n * mdUp //=> `true` during SSR\r\n *\r\n * @example\r\n * const breakpoints = useBreakpoints({defaults: true});\r\n * breakpoints //=> All values will be `true` during SSR\r\n */\r\nfunction useBreakpoints(options) {\r\n  // On SSR, and initial CSR, we force usage of the defaults to avoid a\r\n  // hydration mismatch error.\r\n  // Later, in the effect, we will call this again on the client side without\r\n  // any defaults to trigger a more accurate client side evaluation.\r\n  const [breakpoints, setBreakpoints] = useState(getDefaultMatches(options?.defaults));\r\n  useIsomorphicLayoutEffect(() => {\r\n    // Now that we're client side, get the real values\r\n    setBreakpoints(getLiveMatches());\r\n\r\n    // Register a callback to set the breakpoints object whenever there's a\r\n    // change in the future\r\n    const callback = (breakpointAlias, matches) => {\r\n      setBreakpoints(prevBreakpoints => ({\r\n        ...prevBreakpoints,\r\n        [breakpointAlias]: matches\r\n      }));\r\n    };\r\n    hookCallbacks.add(callback);\r\n    return () => {\r\n      hookCallbacks.delete(callback);\r\n    };\r\n  }, []);\r\n  return breakpoints;\r\n}\r\n\r\n/**\r\n * Converts `breakpoints` tokens into directional media query entries.\r\n *\r\n * @example\r\n * const breakpointsQueryEntries = getBreakpointsQueryEntries(breakpoints);\r\n * breakpointsQueryEntries === [\r\n *   ['xsUp', '(min-width: ...)'],\r\n *   ['xsDown', '(max-width: ...)'],\r\n *   ['xsOnly', '(min-width: ...) and (max-width: ...)'],\r\n *   ['smUp', '(min-width: ...) and (max-width: ...)'],\r\n *   ['mdUp', '(min-width: ...) and (max-width: ...)'],\r\n *   // etc.\r\n * ]\r\n */\r\nfunction getBreakpointsQueryEntries(breakpoints) {\r\n  const mediaConditionEntries = Object.entries(getMediaConditions(breakpoints));\r\n  return mediaConditionEntries.map(([breakpointsToken, mediaConditions]) => Object.entries(mediaConditions).map(([direction, mediaCondition]) => {\r\n    const breakpointsAlias = breakpointsToken.split('-')[1];\r\n\r\n    // e.g. smUp, smDown, smOnly, etc.\r\n    const directionAlias = `${breakpointsAlias}${capitalize(direction)}`;\r\n    return [directionAlias, mediaCondition];\r\n  })).flat();\r\n}\r\nfunction capitalize(str) {\r\n  return str.charAt(0).toUpperCase() + str.slice(1);\r\n}\r\n\r\nexport { getBreakpointsQueryEntries, navigationBarCollapsed, stackedContent, useBreakpoints };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}