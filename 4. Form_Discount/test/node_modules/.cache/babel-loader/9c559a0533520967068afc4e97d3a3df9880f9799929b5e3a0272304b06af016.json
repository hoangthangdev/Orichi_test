{"ast":null,"code":"import React from 'react';\nimport { classNames, variationName } from '../../utilities/css.js';\nimport { useBreakpoints } from '../../utilities/breakpoints.js';\nimport styles from './Icon.css.js';\nimport { Text } from '../Text/Text.js';\nfunction Icon(_ref) {\n  let {\n    source,\n    tone,\n    accessibilityLabel\n  } = _ref;\n  let sourceType;\n  if (typeof source === 'function') {\n    sourceType = 'function';\n  } else if (source === 'placeholder') {\n    sourceType = 'placeholder';\n  } else {\n    sourceType = 'external';\n  }\n  if (tone && sourceType === 'external' && process.env.NODE_ENV === 'development') {\n    // eslint-disable-next-line no-console\n    console.warn('Recoloring external SVGs is not supported. Set the intended color on your SVG instead.');\n  }\n  const className = classNames(styles.Icon, tone && styles[variationName('tone', tone)]);\n  const {\n    mdDown\n  } = useBreakpoints();\n  const SourceComponent = source;\n  const contentMarkup = {\n    function: /*#__PURE__*/React.createElement(SourceComponent, Object.assign({\n      className: styles.Svg,\n      focusable: \"false\",\n      \"aria-hidden\": \"true\"\n      // On Mobile we're scaling the viewBox to 18x18 to make the icons bigger\n      // Also, we're setting the viewport origin to 1x1 to center the icon\n      // We use this syntax so we don't override the existing viewBox value if we don't need to.\n    }, mdDown ? {\n      viewBox: '1 1 18 18'\n    } : {})),\n    placeholder: /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.Placeholder\n    }),\n    external: /*#__PURE__*/React.createElement(\"img\", {\n      className: styles.Img,\n      src: `data:image/svg+xml;utf8,${source}`,\n      alt: \"\",\n      \"aria-hidden\": \"true\"\n    })\n  };\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: className\n  }, accessibilityLabel && /*#__PURE__*/React.createElement(Text, {\n    as: \"span\",\n    visuallyHidden: true\n  }, accessibilityLabel), contentMarkup[sourceType]);\n}\nexport { Icon };","map":{"version":3,"names":["React","classNames","variationName","useBreakpoints","styles","Text","Icon","_ref","source","tone","accessibilityLabel","sourceType","process","env","NODE_ENV","console","warn","className","mdDown","SourceComponent","contentMarkup","function","createElement","Object","assign","Svg","focusable","viewBox","placeholder","Placeholder","external","Img","src","alt","as","visuallyHidden"],"sources":["D:/tesst/test/node_modules/@shopify/polaris/build/esm/components/Icon/Icon.js"],"sourcesContent":["import React from 'react';\nimport { classNames, variationName } from '../../utilities/css.js';\nimport { useBreakpoints } from '../../utilities/breakpoints.js';\nimport styles from './Icon.css.js';\nimport { Text } from '../Text/Text.js';\n\nfunction Icon({\n  source,\n  tone,\n  accessibilityLabel\n}) {\n  let sourceType;\n  if (typeof source === 'function') {\n    sourceType = 'function';\n  } else if (source === 'placeholder') {\n    sourceType = 'placeholder';\n  } else {\n    sourceType = 'external';\n  }\n  if (tone && sourceType === 'external' && process.env.NODE_ENV === 'development') {\n    // eslint-disable-next-line no-console\n    console.warn('Recoloring external SVGs is not supported. Set the intended color on your SVG instead.');\n  }\n  const className = classNames(styles.Icon, tone && styles[variationName('tone', tone)]);\n  const {\n    mdDown\n  } = useBreakpoints();\n  const SourceComponent = source;\n  const contentMarkup = {\n    function: /*#__PURE__*/React.createElement(SourceComponent, Object.assign({\n      className: styles.Svg,\n      focusable: \"false\",\n      \"aria-hidden\": \"true\"\n      // On Mobile we're scaling the viewBox to 18x18 to make the icons bigger\n      // Also, we're setting the viewport origin to 1x1 to center the icon\n      // We use this syntax so we don't override the existing viewBox value if we don't need to.\n    }, mdDown ? {\n      viewBox: '1 1 18 18'\n    } : {})),\n    placeholder: /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.Placeholder\n    }),\n    external: /*#__PURE__*/React.createElement(\"img\", {\n      className: styles.Img,\n      src: `data:image/svg+xml;utf8,${source}`,\n      alt: \"\",\n      \"aria-hidden\": \"true\"\n    })\n  };\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: className\n  }, accessibilityLabel && /*#__PURE__*/React.createElement(Text, {\n    as: \"span\",\n    visuallyHidden: true\n  }, accessibilityLabel), contentMarkup[sourceType]);\n}\n\nexport { Icon };\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,EAAEC,aAAa,QAAQ,wBAAwB;AAClE,SAASC,cAAc,QAAQ,gCAAgC;AAC/D,OAAOC,MAAM,MAAM,eAAe;AAClC,SAASC,IAAI,QAAQ,iBAAiB;AAEtC,SAASC,IAAIA,CAAAC,IAAA,EAIV;EAAA,IAJW;IACZC,MAAM;IACNC,IAAI;IACJC;EACF,CAAC,GAAAH,IAAA;EACC,IAAII,UAAU;EACd,IAAI,OAAOH,MAAM,KAAK,UAAU,EAAE;IAChCG,UAAU,GAAG,UAAU;EACzB,CAAC,MAAM,IAAIH,MAAM,KAAK,aAAa,EAAE;IACnCG,UAAU,GAAG,aAAa;EAC5B,CAAC,MAAM;IACLA,UAAU,GAAG,UAAU;EACzB;EACA,IAAIF,IAAI,IAAIE,UAAU,KAAK,UAAU,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;IAC/E;IACAC,OAAO,CAACC,IAAI,CAAC,wFAAwF,CAAC;EACxG;EACA,MAAMC,SAAS,GAAGhB,UAAU,CAACG,MAAM,CAACE,IAAI,EAAEG,IAAI,IAAIL,MAAM,CAACF,aAAa,CAAC,MAAM,EAAEO,IAAI,CAAC,CAAC,CAAC;EACtF,MAAM;IACJS;EACF,CAAC,GAAGf,cAAc,CAAC,CAAC;EACpB,MAAMgB,eAAe,GAAGX,MAAM;EAC9B,MAAMY,aAAa,GAAG;IACpBC,QAAQ,EAAE,aAAarB,KAAK,CAACsB,aAAa,CAACH,eAAe,EAAEI,MAAM,CAACC,MAAM,CAAC;MACxEP,SAAS,EAAEb,MAAM,CAACqB,GAAG;MACrBC,SAAS,EAAE,OAAO;MAClB,aAAa,EAAE;MACf;MACA;MACA;IACF,CAAC,EAAER,MAAM,GAAG;MACVS,OAAO,EAAE;IACX,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACRC,WAAW,EAAE,aAAa5B,KAAK,CAACsB,aAAa,CAAC,KAAK,EAAE;MACnDL,SAAS,EAAEb,MAAM,CAACyB;IACpB,CAAC,CAAC;IACFC,QAAQ,EAAE,aAAa9B,KAAK,CAACsB,aAAa,CAAC,KAAK,EAAE;MAChDL,SAAS,EAAEb,MAAM,CAAC2B,GAAG;MACrBC,GAAG,EAAE,2BAA2BxB,MAAM,EAAE;MACxCyB,GAAG,EAAE,EAAE;MACP,aAAa,EAAE;IACjB,CAAC;EACH,CAAC;EACD,OAAO,aAAajC,KAAK,CAACsB,aAAa,CAAC,MAAM,EAAE;IAC9CL,SAAS,EAAEA;EACb,CAAC,EAAEP,kBAAkB,IAAI,aAAaV,KAAK,CAACsB,aAAa,CAACjB,IAAI,EAAE;IAC9D6B,EAAE,EAAE,MAAM;IACVC,cAAc,EAAE;EAClB,CAAC,EAAEzB,kBAAkB,CAAC,EAAEU,aAAa,CAACT,UAAU,CAAC,CAAC;AACpD;AAEA,SAASL,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}